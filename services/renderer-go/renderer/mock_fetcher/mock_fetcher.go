// Code generated by MockGen. DO NOT EDIT.
// Source: ../pb/fetcher/fetcher.pb.go

// Package mock_fetcher is a generated GoMock package.
package mock_fetcher

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	fetcher "github.com/hatena/Hatena-Intern-2020/services/renderer-go/pb/fetcher"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockFetcherClient is a mock of FetcherClient interface
type MockFetcherClient struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherClientMockRecorder
}

// MockFetcherClientMockRecorder is the mock recorder for MockFetcherClient
type MockFetcherClientMockRecorder struct {
	mock *MockFetcherClient
}

// NewMockFetcherClient creates a new mock instance
func NewMockFetcherClient(ctrl *gomock.Controller) *MockFetcherClient {
	mock := &MockFetcherClient{ctrl: ctrl}
	mock.recorder = &MockFetcherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFetcherClient) EXPECT() *MockFetcherClientMockRecorder {
	return m.recorder
}

// Fetcher mocks base method
func (m *MockFetcherClient) Fetcher(ctx context.Context, in *fetcher.FetcherRequest, opts ...grpc.CallOption) (*fetcher.FetcherReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fetcher", varargs...)
	ret0, _ := ret[0].(*fetcher.FetcherReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetcher indicates an expected call of Fetcher
func (mr *MockFetcherClientMockRecorder) Fetcher(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetcher", reflect.TypeOf((*MockFetcherClient)(nil).Fetcher), varargs...)
}

// MockFetcherServer is a mock of FetcherServer interface
type MockFetcherServer struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherServerMockRecorder
}

// MockFetcherServerMockRecorder is the mock recorder for MockFetcherServer
type MockFetcherServerMockRecorder struct {
	mock *MockFetcherServer
}

// NewMockFetcherServer creates a new mock instance
func NewMockFetcherServer(ctrl *gomock.Controller) *MockFetcherServer {
	mock := &MockFetcherServer{ctrl: ctrl}
	mock.recorder = &MockFetcherServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFetcherServer) EXPECT() *MockFetcherServerMockRecorder {
	return m.recorder
}

// Fetcher mocks base method
func (m *MockFetcherServer) Fetcher(arg0 context.Context, arg1 *fetcher.FetcherRequest) (*fetcher.FetcherReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetcher", arg0, arg1)
	ret0, _ := ret[0].(*fetcher.FetcherReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetcher indicates an expected call of Fetcher
func (mr *MockFetcherServerMockRecorder) Fetcher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetcher", reflect.TypeOf((*MockFetcherServer)(nil).Fetcher), arg0, arg1)
}
